---

- name: check kubectl
  become: yes
  command: kubectl get nodes
  register: getnodes
- debug: msg="{{getnodes.stdout_lines}}"

- name: creates directories
  file:
    path: "{{item}}"
    state: directory
  loop: ['golang-hello-world-web','golang-hello-world-web2']

- name: render templates for golang-hello-world-web
  template:
    src: "{{item}}"
    dest: golang-hello-world-web/.
  with_fileglob: "../templates/golang-hello-world-web/*.*"

- name: render templates for golang-hello-world-web2
  template:
    src: "{{item}}"
    dest: golang-hello-world-web2/.
  with_fileglob: "../templates/golang-hello-world-web2/*.*"

- name: kubectl apply for golang-hello-world-web
  become: yes
  shell:
    cmd: "kubectl apply -f golang-hello-world-web/{{ item | basename }}"
  with_fileglob: "../templates/golang-hello-world-web/*.*"
  register: k8sapply_results
- debug:
    msg: "{{ item.stdout_lines }} {{ item.stderr_lines }}"
  loop: "{{ k8sapply_results.results }}"
  loop_control:
    label: "{{ item.rc }}"

- name: kubectl apply for golang-hello-world-web2
  become: yes
  shell:
    cmd: "kubectl apply -f golang-hello-world-web2/{{ item | basename }}"
  with_fileglob: "../templates/golang-hello-world-web2/*.*"
  register: k8sapply_results
  when: do_second_ingress
- debug:
    msg: "{{ item.stdout_lines }} {{ item.stderr_lines }}"
  loop: "{{ k8sapply_results.results }}"
  loop_control:
    label: "{{ item.rc }}"
  when: do_second_ingress

