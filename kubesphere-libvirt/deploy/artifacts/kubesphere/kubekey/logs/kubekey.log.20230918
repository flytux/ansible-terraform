01:01:52 UTC [GreetingsModule] Greetings
01:01:53 UTC message: [kubesphere-worker-1]
Greetings, KubeKey!
01:01:53 UTC message: [kubesphere-master-2]
Greetings, KubeKey!
01:01:53 UTC message: [kubesphere-master-1]
Greetings, KubeKey!
01:01:53 UTC success: [kubesphere-worker-1]
01:01:53 UTC success: [kubesphere-master-2]
01:01:53 UTC success: [kubesphere-master-1]
01:01:53 UTC [NodePreCheckModule] A pre-check on nodes
01:01:53 UTC success: [kubesphere-master-1]
01:01:53 UTC success: [kubesphere-worker-1]
01:01:53 UTC success: [kubesphere-master-2]
01:01:53 UTC [ConfirmModule] Display confirmation form
01:01:53 UTC success: [LocalHost]
01:01:53 UTC [NodeBinariesModule] Download installation binaries
01:01:53 UTC message: [localhost]
downloading amd64 kubeadm v1.23.10 ...
01:01:54 UTC message: [localhost]
kubeadm is existed
01:01:54 UTC message: [localhost]
downloading amd64 kubelet v1.23.10 ...
01:01:54 UTC message: [localhost]
kubelet is existed
01:01:54 UTC message: [localhost]
downloading amd64 kubectl v1.23.10 ...
01:01:54 UTC message: [localhost]
kubectl is existed
01:01:54 UTC message: [localhost]
downloading amd64 helm v3.9.0 ...
01:01:54 UTC message: [localhost]
helm is existed
01:01:54 UTC message: [localhost]
downloading amd64 kubecni v1.2.0 ...
01:01:54 UTC message: [localhost]
kubecni is existed
01:01:54 UTC message: [localhost]
downloading amd64 crictl v1.24.0 ...
01:01:54 UTC message: [localhost]
crictl is existed
01:01:54 UTC message: [localhost]
downloading amd64 etcd v3.4.13 ...
01:01:54 UTC message: [localhost]
etcd is existed
01:01:54 UTC message: [localhost]
downloading amd64 containerd 1.6.4 ...
01:01:54 UTC message: [localhost]
containerd is existed
01:01:54 UTC message: [localhost]
downloading amd64 runc v1.1.1 ...
01:01:54 UTC message: [localhost]
runc is existed
01:01:54 UTC message: [localhost]
downloading amd64 calicoctl v3.23.2 ...
01:01:55 UTC message: [localhost]
calicoctl is existed
01:01:55 UTC success: [LocalHost]
01:01:55 UTC [ConfigureOSModule] Get OS release
01:01:55 UTC success: [kubesphere-master-1]
01:01:55 UTC success: [kubesphere-worker-1]
01:01:55 UTC success: [kubesphere-master-2]
01:01:55 UTC [ConfigureOSModule] Prepare to init OS
01:01:55 UTC success: [kubesphere-worker-1]
01:01:55 UTC success: [kubesphere-master-2]
01:01:55 UTC success: [kubesphere-master-1]
01:01:55 UTC [ConfigureOSModule] Generate init os script
01:01:55 UTC success: [kubesphere-master-2]
01:01:55 UTC success: [kubesphere-master-1]
01:01:55 UTC success: [kubesphere-worker-1]
01:01:55 UTC [ConfigureOSModule] Exec init os script
01:01:57 UTC stdout: [kubesphere-master-1]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:01:57 UTC stdout: [kubesphere-worker-1]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:01:57 UTC stdout: [kubesphere-master-2]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:01:57 UTC success: [kubesphere-master-1]
01:01:57 UTC success: [kubesphere-worker-1]
01:01:57 UTC success: [kubesphere-master-2]
01:01:57 UTC [ConfigureOSModule] configure the ntp server for each node
01:01:57 UTC skipped: [kubesphere-worker-1]
01:01:57 UTC skipped: [kubesphere-master-1]
01:01:57 UTC skipped: [kubesphere-master-2]
01:01:57 UTC [KubernetesStatusModule] Get kubernetes cluster status
01:01:57 UTC success: [kubesphere-master-1]
01:01:57 UTC success: [kubesphere-master-2]
01:01:57 UTC [InstallContainerModule] Sync containerd binaries
01:01:57 UTC skipped: [kubesphere-master-2]
01:01:57 UTC skipped: [kubesphere-master-1]
01:01:57 UTC skipped: [kubesphere-worker-1]
01:01:57 UTC [InstallContainerModule] Sync crictl binaries
01:01:58 UTC success: [kubesphere-master-1]
01:01:58 UTC success: [kubesphere-worker-1]
01:01:58 UTC success: [kubesphere-master-2]
01:01:58 UTC [InstallContainerModule] Generate containerd service
01:01:58 UTC skipped: [kubesphere-master-2]
01:01:58 UTC skipped: [kubesphere-worker-1]
01:01:58 UTC skipped: [kubesphere-master-1]
01:01:58 UTC [InstallContainerModule] Generate containerd config
01:01:58 UTC skipped: [kubesphere-master-1]
01:01:58 UTC skipped: [kubesphere-worker-1]
01:01:58 UTC skipped: [kubesphere-master-2]
01:01:58 UTC [InstallContainerModule] Generate crictl config
01:01:58 UTC skipped: [kubesphere-master-2]
01:01:58 UTC skipped: [kubesphere-worker-1]
01:01:58 UTC skipped: [kubesphere-master-1]
01:01:58 UTC [InstallContainerModule] Enable containerd
01:01:58 UTC skipped: [kubesphere-master-1]
01:01:58 UTC skipped: [kubesphere-worker-1]
01:01:58 UTC skipped: [kubesphere-master-2]
01:01:58 UTC [PullModule] Start to pull images on all nodes
01:01:58 UTC message: [kubesphere-master-1]
downloading image: kubesphere/pause:3.6
01:01:58 UTC message: [kubesphere-master-2]
downloading image: kubesphere/pause:3.6
01:01:58 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/pause:3.6
01:01:59 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-apiserver:v1.23.10
01:01:59 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-apiserver:v1.23.10
01:01:59 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/kube-proxy:v1.23.10
01:02:02 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-controller-manager:v1.23.10
01:02:02 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-controller-manager:v1.23.10
01:02:02 UTC message: [kubesphere-worker-1]
downloading image: coredns/coredns:1.8.6
01:02:04 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:02:05 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-scheduler:v1.23.10
01:02:05 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-scheduler:v1.23.10
01:02:06 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-proxy:v1.23.10
01:02:07 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-proxy:v1.23.10
01:02:07 UTC message: [kubesphere-worker-1]
downloading image: calico/kube-controllers:v3.23.2
01:02:09 UTC message: [kubesphere-master-2]
downloading image: coredns/coredns:1.8.6
01:02:10 UTC message: [kubesphere-master-1]
downloading image: coredns/coredns:1.8.6
01:02:10 UTC message: [kubesphere-worker-1]
downloading image: calico/cni:v3.23.2
01:02:11 UTC message: [kubesphere-master-2]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:02:12 UTC message: [kubesphere-master-1]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:02:14 UTC message: [kubesphere-master-2]
downloading image: calico/kube-controllers:v3.23.2
01:02:15 UTC message: [kubesphere-worker-1]
downloading image: calico/node:v3.23.2
01:02:15 UTC message: [kubesphere-master-1]
downloading image: calico/kube-controllers:v3.23.2
01:02:18 UTC message: [kubesphere-master-1]
downloading image: calico/cni:v3.23.2
01:02:18 UTC message: [kubesphere-master-2]
downloading image: calico/cni:v3.23.2
01:02:18 UTC message: [kubesphere-worker-1]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:02:23 UTC message: [kubesphere-master-1]
downloading image: calico/node:v3.23.2
01:02:23 UTC message: [kubesphere-master-2]
downloading image: calico/node:v3.23.2
01:02:26 UTC message: [kubesphere-master-1]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:02:27 UTC message: [kubesphere-master-2]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:02:29 UTC success: [kubesphere-worker-1]
01:02:29 UTC success: [kubesphere-master-1]
01:02:29 UTC success: [kubesphere-master-2]
01:02:29 UTC [ETCDPreCheckModule] Get etcd status
01:02:29 UTC success: [kubesphere-master-1]
01:02:29 UTC success: [kubesphere-master-2]
01:02:29 UTC [CertsModule] Fetch etcd certs
01:02:29 UTC success: [kubesphere-master-1]
01:02:29 UTC skipped: [kubesphere-master-2]
01:02:29 UTC [CertsModule] Generate etcd Certs
01:02:29 UTC success: [LocalHost]
01:02:29 UTC [CertsModule] Synchronize certs file
01:02:29 UTC success: [kubesphere-master-2]
01:02:29 UTC success: [kubesphere-master-1]
01:02:29 UTC [CertsModule] Synchronize certs file to master
01:02:29 UTC skipped: [kubesphere-master-2]
01:02:29 UTC skipped: [kubesphere-master-1]
01:02:29 UTC [InstallETCDBinaryModule] Install etcd using binary
01:02:30 UTC success: [kubesphere-master-2]
01:02:30 UTC success: [kubesphere-master-1]
01:02:30 UTC [InstallETCDBinaryModule] Generate etcd service
01:02:30 UTC success: [kubesphere-master-2]
01:02:30 UTC success: [kubesphere-master-1]
01:02:30 UTC [InstallETCDBinaryModule] Generate access address
01:02:30 UTC skipped: [kubesphere-master-2]
01:02:30 UTC success: [kubesphere-master-1]
01:02:30 UTC [ETCDConfigureModule] Health check on exist etcd
01:02:30 UTC skipped: [kubesphere-master-2]
01:02:30 UTC skipped: [kubesphere-master-1]
01:02:30 UTC [ETCDConfigureModule] Generate etcd.env config on new etcd
01:02:30 UTC success: [kubesphere-master-1]
01:02:30 UTC success: [kubesphere-master-2]
01:02:30 UTC [ETCDConfigureModule] Refresh etcd.env config on all etcd
01:02:30 UTC success: [kubesphere-master-1]
01:02:30 UTC success: [kubesphere-master-2]
01:02:30 UTC [ETCDConfigureModule] Restart etcd
01:02:37 UTC stdout: [kubesphere-master-1]
Created symlink /etc/systemd/system/multi-user.target.wants/etcd.service → /etc/systemd/system/etcd.service.
01:02:37 UTC stdout: [kubesphere-master-2]
Created symlink /etc/systemd/system/multi-user.target.wants/etcd.service → /etc/systemd/system/etcd.service.
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC [ETCDConfigureModule] Health check on all etcd
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC [ETCDConfigureModule] Refresh etcd.env config to exist mode on all etcd
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC [ETCDConfigureModule] Health check on all etcd
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC [ETCDBackupModule] Backup etcd data regularly
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC [ETCDBackupModule] Generate backup ETCD service
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC [ETCDBackupModule] Generate backup ETCD timer
01:02:37 UTC success: [kubesphere-master-2]
01:02:37 UTC success: [kubesphere-master-1]
01:02:37 UTC [ETCDBackupModule] Enable backup etcd service
01:02:38 UTC success: [kubesphere-master-2]
01:02:38 UTC success: [kubesphere-master-1]
01:02:38 UTC [InstallKubeBinariesModule] Synchronize kubernetes binaries
01:02:42 UTC success: [kubesphere-worker-1]
01:02:42 UTC success: [kubesphere-master-2]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC [InstallKubeBinariesModule] Change kubelet mode
01:02:42 UTC success: [kubesphere-master-2]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC success: [kubesphere-worker-1]
01:02:42 UTC [InstallKubeBinariesModule] Generate kubelet service
01:02:42 UTC success: [kubesphere-worker-1]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC success: [kubesphere-master-2]
01:02:42 UTC [InstallKubeBinariesModule] Enable kubelet service
01:02:42 UTC success: [kubesphere-master-2]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC success: [kubesphere-worker-1]
01:02:42 UTC [InstallKubeBinariesModule] Generate kubelet env
01:02:42 UTC success: [kubesphere-worker-1]
01:02:42 UTC success: [kubesphere-master-2]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC [InitKubernetesModule] Generate kubeadm config
01:02:42 UTC skipped: [kubesphere-master-2]
01:02:42 UTC success: [kubesphere-master-1]
01:02:42 UTC [InitKubernetesModule] Generate audit policy
01:02:42 UTC skipped: [kubesphere-master-2]
01:02:42 UTC skipped: [kubesphere-master-1]
01:02:42 UTC [InitKubernetesModule] Generate audit webhook
01:02:42 UTC skipped: [kubesphere-master-2]
01:02:42 UTC skipped: [kubesphere-master-1]
01:02:42 UTC [InitKubernetesModule] Init cluster using kubeadm
01:02:58 UTC stdout: [kubesphere-master-1]
W0918 01:02:42.771651    3872 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
[init] Using Kubernetes version: v1.23.10
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local kubesphere-master-1 kubesphere-master-1.cluster.local kubesphere-master-2 kubesphere-master-2.cluster.local kubesphere-worker-1 kubesphere-worker-1.cluster.local lb.kubesphere.local localhost] and IPs [10.233.0.1 192.168.122.151 127.0.0.1 192.168.122.152 192.168.122.181]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] External etcd mode: Skipping etcd/ca certificate authority generation
[certs] External etcd mode: Skipping etcd/server certificate generation
[certs] External etcd mode: Skipping etcd/peer certificate generation
[certs] External etcd mode: Skipping etcd/healthcheck-client certificate generation
[certs] External etcd mode: Skipping apiserver-etcd-client certificate generation
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 13.003456 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.23" in namespace kube-system with the configuration for the kubelets in the cluster
NOTE: The "kubelet-config-1.23" naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just "kubelet-config". Kubeadm upgrade will handle this transition transparently.
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node kubesphere-master-1 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node kubesphere-master-1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: lfx7da.6tknpo3749ghskdk
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join lb.kubesphere.local:6443 --token lfx7da.6tknpo3749ghskdk \
	--discovery-token-ca-cert-hash sha256:7de1ac4d56a8bd0dcc78361cd35f2de314e7f2036171c8a38f1c9d705acd02fa \
	--control-plane 

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join lb.kubesphere.local:6443 --token lfx7da.6tknpo3749ghskdk \
	--discovery-token-ca-cert-hash sha256:7de1ac4d56a8bd0dcc78361cd35f2de314e7f2036171c8a38f1c9d705acd02fa
01:02:58 UTC skipped: [kubesphere-master-2]
01:02:58 UTC success: [kubesphere-master-1]
01:02:58 UTC [InitKubernetesModule] Copy admin.conf to ~/.kube/config
01:02:58 UTC skipped: [kubesphere-master-2]
01:02:58 UTC success: [kubesphere-master-1]
01:02:58 UTC [InitKubernetesModule] Remove master taint
01:02:58 UTC skipped: [kubesphere-master-2]
01:02:58 UTC skipped: [kubesphere-master-1]
01:02:58 UTC [ClusterDNSModule] Generate coredns service
01:02:59 UTC skipped: [kubesphere-master-2]
01:02:59 UTC success: [kubesphere-master-1]
01:02:59 UTC [ClusterDNSModule] Override coredns service
01:02:59 UTC stdout: [kubesphere-master-1]
service "kube-dns" deleted
01:03:00 UTC stdout: [kubesphere-master-1]
service/coredns created
Warning: resource clusterroles/system:coredns is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
clusterrole.rbac.authorization.k8s.io/system:coredns configured
01:03:00 UTC skipped: [kubesphere-master-2]
01:03:00 UTC success: [kubesphere-master-1]
01:03:00 UTC [ClusterDNSModule] Generate nodelocaldns
01:03:00 UTC skipped: [kubesphere-master-2]
01:03:00 UTC success: [kubesphere-master-1]
01:03:00 UTC [ClusterDNSModule] Deploy nodelocaldns
01:03:00 UTC stdout: [kubesphere-master-1]
serviceaccount/nodelocaldns created
daemonset.apps/nodelocaldns created
01:03:00 UTC skipped: [kubesphere-master-2]
01:03:00 UTC success: [kubesphere-master-1]
01:03:00 UTC [ClusterDNSModule] Generate nodelocaldns configmap
01:03:00 UTC skipped: [kubesphere-master-2]
01:03:00 UTC success: [kubesphere-master-1]
01:03:00 UTC [ClusterDNSModule] Apply nodelocaldns configmap
01:03:00 UTC stdout: [kubesphere-master-1]
configmap/nodelocaldns created
01:03:00 UTC skipped: [kubesphere-master-2]
01:03:00 UTC success: [kubesphere-master-1]
01:03:00 UTC [KubernetesStatusModule] Get kubernetes cluster status
01:03:00 UTC stdout: [kubesphere-master-1]
v1.23.10
01:03:00 UTC stdout: [kubesphere-master-1]
kubesphere-master-1   v1.23.10   [map[address:192.168.122.151 type:InternalIP] map[address:kubesphere-master-1 type:Hostname]]
01:03:00 UTC stdout: [kubesphere-master-1]
W0918 01:03:00.789748    4552 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
[upload-certs] Storing the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[upload-certs] Using certificate key:
fbe4ff24e227e8ebd34195edf93440111e49cc399b7a220f26fe1ff5c7ccf979
01:03:00 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:03:00 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:03:01 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:03:01 UTC stdout: [kubesphere-master-1]
f8js75.3xuf3ihpuxg553kj
01:03:01 UTC success: [kubesphere-master-1]
01:03:01 UTC success: [kubesphere-master-2]
01:03:01 UTC [JoinNodesModule] Generate kubeadm config
01:03:01 UTC skipped: [kubesphere-master-1]
01:03:01 UTC success: [kubesphere-worker-1]
01:03:01 UTC success: [kubesphere-master-2]
01:03:01 UTC [JoinNodesModule] Generate audit policy
01:03:01 UTC skipped: [kubesphere-master-2]
01:03:01 UTC skipped: [kubesphere-master-1]
01:03:01 UTC [JoinNodesModule] Generate audit webhook
01:03:01 UTC skipped: [kubesphere-master-2]
01:03:01 UTC skipped: [kubesphere-master-1]
01:03:01 UTC [JoinNodesModule] Join control-plane node
01:03:21 UTC stdout: [kubesphere-master-2]
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
W0918 01:03:14.093215    3901 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
W0918 01:03:14.095190    3901 utils.go:69] The recommended value for "resolvConf" in "KubeletConfiguration" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf
[preflight] Running pre-flight checks before initializing the new control plane instance
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[download-certs] Downloading the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local kubesphere-master-1 kubesphere-master-1.cluster.local kubesphere-master-2 kubesphere-master-2.cluster.local kubesphere-worker-1 kubesphere-worker-1.cluster.local lb.kubesphere.local localhost] and IPs [10.233.0.1 192.168.122.152 127.0.0.1 192.168.122.151 192.168.122.181]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Valid certificates and keys now exist in "/etc/kubernetes/pki"
[certs] Using the existing "sa" key
[kubeconfig] Generating kubeconfig files
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[check-etcd] Skipping etcd check in external mode
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
[control-plane-join] using external etcd - no local stacked instance added
The 'update-status' phase is deprecated and will be removed in a future release. Currently it performs no operation
[mark-control-plane] Marking the node kubesphere-master-2 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node kubesphere-master-2 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]

This node has joined the cluster and a new control plane instance was created:

* Certificate signing request was sent to apiserver and approval was received.
* The Kubelet was informed of the new secure connection details.
* Control plane (master) label and taint were applied to the new node.
* The Kubernetes control plane instances scaled up.


To start administering your cluster from this node, you need to run the following as a regular user:

	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config

Run 'kubectl get nodes' to see this node join the cluster.
01:03:21 UTC skipped: [kubesphere-master-1]
01:03:21 UTC success: [kubesphere-master-2]
01:03:21 UTC [JoinNodesModule] Join worker node
01:03:27 UTC stdout: [kubesphere-worker-1]
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
W0918 01:03:21.714416    3327 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
W0918 01:03:21.717168    3327 utils.go:69] The recommended value for "resolvConf" in "KubeletConfiguration" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
01:03:27 UTC skipped: [kubesphere-master-2]
01:03:27 UTC success: [kubesphere-worker-1]
01:03:27 UTC [JoinNodesModule] Copy admin.conf to ~/.kube/config
01:03:27 UTC skipped: [kubesphere-master-1]
01:03:27 UTC success: [kubesphere-master-2]
01:03:27 UTC [JoinNodesModule] Remove master taint
01:03:28 UTC stdout: [kubesphere-master-2]
node/kubesphere-master-2 untainted
01:03:28 UTC stdout: [kubesphere-master-2]
error: taint "node-role.kubernetes.io/control-plane:NoSchedule" not found
01:03:28 UTC [WARN] Failed to exec command: sudo -E /bin/bash -c "/usr/local/bin/kubectl taint nodes kubesphere-master-2 node-role.kubernetes.io/control-plane=:NoSchedule-" 
error: taint "node-role.kubernetes.io/control-plane:NoSchedule" not found: Process exited with status 1
01:03:28 UTC skipped: [kubesphere-master-1]
01:03:28 UTC success: [kubesphere-master-2]
01:03:28 UTC [JoinNodesModule] Add worker label to all nodes
01:03:28 UTC stdout: [kubesphere-master-1]
node/kubesphere-master-2 labeled
01:03:28 UTC stdout: [kubesphere-master-1]
node/kubesphere-worker-1 labeled
01:03:28 UTC success: [kubesphere-master-1]
01:03:28 UTC skipped: [kubesphere-master-2]
01:03:28 UTC [DeployNetworkPluginModule] Generate calico
01:03:28 UTC skipped: [kubesphere-master-2]
01:03:28 UTC success: [kubesphere-master-1]
01:03:28 UTC [DeployNetworkPluginModule] Deploy calico
01:03:30 UTC stdout: [kubesphere-master-1]
configmap/calico-config created
customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created
clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrole.rbac.authorization.k8s.io/calico-node created
clusterrolebinding.rbac.authorization.k8s.io/calico-node created
daemonset.apps/calico-node created
serviceaccount/calico-node created
deployment.apps/calico-kube-controllers created
serviceaccount/calico-kube-controllers created
poddisruptionbudget.policy/calico-kube-controllers created
01:03:30 UTC skipped: [kubesphere-master-2]
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC [ConfigureKubernetesModule] Configure kubernetes
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC skipped: [kubesphere-master-2]
01:03:30 UTC [ChownModule] Chown user $HOME/.kube dir
01:03:30 UTC success: [kubesphere-worker-1]
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC success: [kubesphere-master-2]
01:03:30 UTC [AutoRenewCertsModule] Generate k8s certs renew script
01:03:30 UTC success: [kubesphere-master-2]
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC [AutoRenewCertsModule] Generate k8s certs renew service
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC success: [kubesphere-master-2]
01:03:30 UTC [AutoRenewCertsModule] Generate k8s certs renew timer
01:03:30 UTC success: [kubesphere-master-1]
01:03:30 UTC success: [kubesphere-master-2]
01:03:30 UTC [AutoRenewCertsModule] Enable k8s certs renew service
01:03:31 UTC success: [kubesphere-master-2]
01:03:31 UTC success: [kubesphere-master-1]
01:03:31 UTC [SaveKubeConfigModule] Save kube config as a configmap
01:03:31 UTC success: [LocalHost]
01:03:31 UTC [AddonsModule] Install addons
01:03:31 UTC success: [LocalHost]
01:03:31 UTC Pipeline[CreateClusterPipeline] execute successfully
01:05:59 UTC [GreetingsModule] Greetings
01:06:00 UTC message: [kubesphere-worker-1]
Greetings, KubeKey!
01:06:00 UTC message: [kubesphere-master-1]
Greetings, KubeKey!
01:06:01 UTC message: [kubesphere-master-2]
Greetings, KubeKey!
01:06:01 UTC success: [kubesphere-worker-1]
01:06:01 UTC success: [kubesphere-master-1]
01:06:01 UTC success: [kubesphere-master-2]
01:06:01 UTC [NodePreCheckModule] A pre-check on nodes
01:06:01 UTC success: [kubesphere-master-2]
01:06:01 UTC success: [kubesphere-worker-1]
01:06:01 UTC success: [kubesphere-master-1]
01:06:01 UTC [ConfirmModule] Display confirmation form
01:06:01 UTC success: [LocalHost]
01:06:01 UTC [NodeBinariesModule] Download installation binaries
01:06:01 UTC message: [localhost]
downloading amd64 kubeadm v1.23.10 ...
01:06:01 UTC message: [localhost]
kubeadm is existed
01:06:01 UTC message: [localhost]
downloading amd64 kubelet v1.23.10 ...
01:06:01 UTC message: [localhost]
kubelet is existed
01:06:01 UTC message: [localhost]
downloading amd64 kubectl v1.23.10 ...
01:06:01 UTC message: [localhost]
kubectl is existed
01:06:01 UTC message: [localhost]
downloading amd64 helm v3.9.0 ...
01:06:01 UTC message: [localhost]
helm is existed
01:06:01 UTC message: [localhost]
downloading amd64 kubecni v1.2.0 ...
01:06:01 UTC message: [localhost]
kubecni is existed
01:06:01 UTC message: [localhost]
downloading amd64 crictl v1.24.0 ...
01:06:01 UTC message: [localhost]
crictl is existed
01:06:01 UTC message: [localhost]
downloading amd64 etcd v3.4.13 ...
01:06:01 UTC message: [localhost]
etcd is existed
01:06:01 UTC message: [localhost]
downloading amd64 containerd 1.6.4 ...
01:06:02 UTC message: [localhost]
containerd is existed
01:06:02 UTC message: [localhost]
downloading amd64 runc v1.1.1 ...
01:06:02 UTC message: [localhost]
runc is existed
01:06:02 UTC message: [localhost]
downloading amd64 calicoctl v3.23.2 ...
01:06:02 UTC message: [localhost]
calicoctl is existed
01:06:02 UTC success: [LocalHost]
01:06:02 UTC [ConfigureOSModule] Get OS release
01:06:02 UTC success: [kubesphere-master-2]
01:06:02 UTC success: [kubesphere-master-1]
01:06:02 UTC success: [kubesphere-worker-1]
01:06:02 UTC [ConfigureOSModule] Prepare to init OS
01:06:02 UTC success: [kubesphere-worker-1]
01:06:02 UTC success: [kubesphere-master-1]
01:06:02 UTC success: [kubesphere-master-2]
01:06:02 UTC [ConfigureOSModule] Generate init os script
01:06:02 UTC success: [kubesphere-master-1]
01:06:02 UTC success: [kubesphere-master-2]
01:06:02 UTC success: [kubesphere-worker-1]
01:06:02 UTC [ConfigureOSModule] Exec init os script
01:06:03 UTC stdout: [kubesphere-master-2]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:06:04 UTC stdout: [kubesphere-worker-1]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:06:04 UTC stdout: [kubesphere-master-1]
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_local_reserved_ports = 30000-32767
net.core.netdev_max_backlog = 65535
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.somaxconn = 32768
net.ipv4.tcp_max_syn_backlog = 1048576
net.ipv4.neigh.default.gc_thresh1 = 512
net.ipv4.neigh.default.gc_thresh2 = 2048
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_max_tw_buckets = 1048576
net.ipv4.tcp_max_orphans = 65535
net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_wmem_min = 131072
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.default.arp_accept = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
vm.max_map_count = 262144
vm.swappiness = 0
vm.overcommit_memory = 0
fs.inotify.max_user_instances = 524288
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 4194304
fs.aio-max-nr = 262144
kernel.pid_max = 65535
kernel.watchdog_thresh = 5
kernel.hung_task_timeout_secs = 5
01:06:04 UTC success: [kubesphere-master-2]
01:06:04 UTC success: [kubesphere-worker-1]
01:06:04 UTC success: [kubesphere-master-1]
01:06:04 UTC [ConfigureOSModule] configure the ntp server for each node
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC [KubernetesStatusModule] Get kubernetes cluster status
01:06:04 UTC success: [kubesphere-master-1]
01:06:04 UTC success: [kubesphere-master-2]
01:06:04 UTC [InstallContainerModule] Sync containerd binaries
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC [InstallContainerModule] Sync crictl binaries
01:06:04 UTC success: [kubesphere-worker-1]
01:06:04 UTC success: [kubesphere-master-2]
01:06:04 UTC success: [kubesphere-master-1]
01:06:04 UTC [InstallContainerModule] Generate containerd service
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC [InstallContainerModule] Generate containerd config
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC [InstallContainerModule] Generate crictl config
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC [InstallContainerModule] Enable containerd
01:06:04 UTC skipped: [kubesphere-master-2]
01:06:04 UTC skipped: [kubesphere-master-1]
01:06:04 UTC skipped: [kubesphere-worker-1]
01:06:04 UTC [PullModule] Start to pull images on all nodes
01:06:04 UTC message: [kubesphere-master-1]
downloading image: kubesphere/pause:3.6
01:06:04 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/pause:3.6
01:06:04 UTC message: [kubesphere-master-2]
downloading image: kubesphere/pause:3.6
01:06:06 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/kube-proxy:v1.23.10
01:06:06 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-apiserver:v1.23.10
01:06:06 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-apiserver:v1.23.10
01:06:09 UTC message: [kubesphere-worker-1]
downloading image: coredns/coredns:1.8.6
01:06:09 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-controller-manager:v1.23.10
01:06:09 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-controller-manager:v1.23.10
01:06:11 UTC message: [kubesphere-worker-1]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:06:11 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-scheduler:v1.23.10
01:06:11 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-scheduler:v1.23.10
01:06:13 UTC message: [kubesphere-master-1]
downloading image: kubesphere/kube-proxy:v1.23.10
01:06:13 UTC message: [kubesphere-master-2]
downloading image: kubesphere/kube-proxy:v1.23.10
01:06:13 UTC message: [kubesphere-worker-1]
downloading image: calico/kube-controllers:v3.23.2
01:06:16 UTC message: [kubesphere-master-1]
downloading image: coredns/coredns:1.8.6
01:06:16 UTC message: [kubesphere-master-2]
downloading image: coredns/coredns:1.8.6
01:06:17 UTC message: [kubesphere-worker-1]
downloading image: calico/cni:v3.23.2
01:06:18 UTC message: [kubesphere-master-1]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:06:18 UTC message: [kubesphere-master-2]
downloading image: kubesphere/k8s-dns-node-cache:1.15.12
01:06:21 UTC message: [kubesphere-master-1]
downloading image: calico/kube-controllers:v3.23.2
01:06:21 UTC message: [kubesphere-master-2]
downloading image: calico/kube-controllers:v3.23.2
01:06:21 UTC message: [kubesphere-worker-1]
downloading image: calico/node:v3.23.2
01:06:24 UTC message: [kubesphere-master-1]
downloading image: calico/cni:v3.23.2
01:06:24 UTC message: [kubesphere-master-2]
downloading image: calico/cni:v3.23.2
01:06:25 UTC message: [kubesphere-worker-1]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:06:28 UTC message: [kubesphere-master-2]
downloading image: calico/node:v3.23.2
01:06:29 UTC message: [kubesphere-master-1]
downloading image: calico/node:v3.23.2
01:06:32 UTC message: [kubesphere-master-2]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:06:32 UTC message: [kubesphere-master-1]
downloading image: calico/pod2daemon-flexvol:v3.23.2
01:06:35 UTC success: [kubesphere-worker-1]
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC [ETCDPreCheckModule] Get etcd status
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC [CertsModule] Fetch etcd certs
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC skipped: [kubesphere-master-2]
01:06:35 UTC [CertsModule] Generate etcd Certs
01:06:35 UTC success: [LocalHost]
01:06:35 UTC [CertsModule] Synchronize certs file
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC [CertsModule] Synchronize certs file to master
01:06:35 UTC skipped: [kubesphere-master-2]
01:06:35 UTC skipped: [kubesphere-master-1]
01:06:35 UTC [InstallETCDBinaryModule] Install etcd using binary
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC [InstallETCDBinaryModule] Generate etcd service
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC [InstallETCDBinaryModule] Generate access address
01:06:35 UTC skipped: [kubesphere-master-2]
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC [ETCDConfigureModule] Health check on exist etcd
01:06:35 UTC skipped: [kubesphere-master-2]
01:06:35 UTC skipped: [kubesphere-master-1]
01:06:35 UTC [ETCDConfigureModule] Generate etcd.env config on new etcd
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC [ETCDConfigureModule] Refresh etcd.env config on all etcd
01:06:35 UTC success: [kubesphere-master-1]
01:06:35 UTC success: [kubesphere-master-2]
01:06:35 UTC [ETCDConfigureModule] Restart etcd
01:06:44 UTC stdout: [kubesphere-master-1]
Created symlink /etc/systemd/system/multi-user.target.wants/etcd.service → /etc/systemd/system/etcd.service.
01:06:44 UTC stdout: [kubesphere-master-2]
Created symlink /etc/systemd/system/multi-user.target.wants/etcd.service → /etc/systemd/system/etcd.service.
01:06:44 UTC success: [kubesphere-master-1]
01:06:44 UTC success: [kubesphere-master-2]
01:06:44 UTC [ETCDConfigureModule] Health check on all etcd
01:06:44 UTC success: [kubesphere-master-1]
01:06:44 UTC success: [kubesphere-master-2]
01:06:44 UTC [ETCDConfigureModule] Refresh etcd.env config to exist mode on all etcd
01:06:44 UTC success: [kubesphere-master-1]
01:06:44 UTC success: [kubesphere-master-2]
01:06:44 UTC [ETCDConfigureModule] Health check on all etcd
01:06:45 UTC success: [kubesphere-master-2]
01:06:45 UTC success: [kubesphere-master-1]
01:06:45 UTC [ETCDBackupModule] Backup etcd data regularly
01:06:45 UTC success: [kubesphere-master-1]
01:06:45 UTC success: [kubesphere-master-2]
01:06:45 UTC [ETCDBackupModule] Generate backup ETCD service
01:06:45 UTC success: [kubesphere-master-1]
01:06:45 UTC success: [kubesphere-master-2]
01:06:45 UTC [ETCDBackupModule] Generate backup ETCD timer
01:06:45 UTC success: [kubesphere-master-1]
01:06:45 UTC success: [kubesphere-master-2]
01:06:45 UTC [ETCDBackupModule] Enable backup etcd service
01:06:45 UTC success: [kubesphere-master-1]
01:06:45 UTC success: [kubesphere-master-2]
01:06:45 UTC [InstallKubeBinariesModule] Synchronize kubernetes binaries
01:06:49 UTC success: [kubesphere-master-1]
01:06:49 UTC success: [kubesphere-master-2]
01:06:49 UTC success: [kubesphere-worker-1]
01:06:49 UTC [InstallKubeBinariesModule] Change kubelet mode
01:06:49 UTC success: [kubesphere-worker-1]
01:06:49 UTC success: [kubesphere-master-2]
01:06:49 UTC success: [kubesphere-master-1]
01:06:49 UTC [InstallKubeBinariesModule] Generate kubelet service
01:06:49 UTC success: [kubesphere-master-2]
01:06:49 UTC success: [kubesphere-master-1]
01:06:49 UTC success: [kubesphere-worker-1]
01:06:49 UTC [InstallKubeBinariesModule] Enable kubelet service
01:06:49 UTC success: [kubesphere-master-1]
01:06:49 UTC success: [kubesphere-master-2]
01:06:49 UTC success: [kubesphere-worker-1]
01:06:49 UTC [InstallKubeBinariesModule] Generate kubelet env
01:06:50 UTC success: [kubesphere-master-2]
01:06:50 UTC success: [kubesphere-master-1]
01:06:50 UTC success: [kubesphere-worker-1]
01:06:50 UTC [InitKubernetesModule] Generate kubeadm config
01:06:50 UTC skipped: [kubesphere-master-2]
01:06:50 UTC success: [kubesphere-master-1]
01:06:50 UTC [InitKubernetesModule] Generate audit policy
01:06:50 UTC skipped: [kubesphere-master-2]
01:06:50 UTC skipped: [kubesphere-master-1]
01:06:50 UTC [InitKubernetesModule] Generate audit webhook
01:06:50 UTC skipped: [kubesphere-master-2]
01:06:50 UTC skipped: [kubesphere-master-1]
01:06:50 UTC [InitKubernetesModule] Init cluster using kubeadm
01:07:05 UTC stdout: [kubesphere-master-1]
W0918 01:06:50.102442    3894 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
[init] Using Kubernetes version: v1.23.10
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local kubesphere-master-1 kubesphere-master-1.cluster.local kubesphere-master-2 kubesphere-master-2.cluster.local kubesphere-worker-1 kubesphere-worker-1.cluster.local lb.kubesphere.local localhost] and IPs [10.233.0.1 192.168.122.151 127.0.0.1 192.168.122.152 192.168.122.181]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] External etcd mode: Skipping etcd/ca certificate authority generation
[certs] External etcd mode: Skipping etcd/server certificate generation
[certs] External etcd mode: Skipping etcd/peer certificate generation
[certs] External etcd mode: Skipping etcd/healthcheck-client certificate generation
[certs] External etcd mode: Skipping apiserver-etcd-client certificate generation
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 12.501925 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.23" in namespace kube-system with the configuration for the kubelets in the cluster
NOTE: The "kubelet-config-1.23" naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just "kubelet-config". Kubeadm upgrade will handle this transition transparently.
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node kubesphere-master-1 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node kubesphere-master-1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: omhbwb.7pydd25ia8md4bac
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join lb.kubesphere.local:6443 --token omhbwb.7pydd25ia8md4bac \
	--discovery-token-ca-cert-hash sha256:d46ccc8eca66f6ea90465fb9446f2fe34649af30b13761bcbf15b31df23ef426 \
	--control-plane 

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join lb.kubesphere.local:6443 --token omhbwb.7pydd25ia8md4bac \
	--discovery-token-ca-cert-hash sha256:d46ccc8eca66f6ea90465fb9446f2fe34649af30b13761bcbf15b31df23ef426
01:07:05 UTC skipped: [kubesphere-master-2]
01:07:05 UTC success: [kubesphere-master-1]
01:07:05 UTC [InitKubernetesModule] Copy admin.conf to ~/.kube/config
01:07:05 UTC skipped: [kubesphere-master-2]
01:07:05 UTC success: [kubesphere-master-1]
01:07:05 UTC [InitKubernetesModule] Remove master taint
01:07:05 UTC skipped: [kubesphere-master-2]
01:07:05 UTC skipped: [kubesphere-master-1]
01:07:05 UTC [ClusterDNSModule] Generate coredns service
01:07:06 UTC skipped: [kubesphere-master-2]
01:07:06 UTC success: [kubesphere-master-1]
01:07:06 UTC [ClusterDNSModule] Override coredns service
01:07:06 UTC stdout: [kubesphere-master-1]
service "kube-dns" deleted
01:07:07 UTC stdout: [kubesphere-master-1]
service/coredns created
Warning: resource clusterroles/system:coredns is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
clusterrole.rbac.authorization.k8s.io/system:coredns configured
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC [ClusterDNSModule] Generate nodelocaldns
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC [ClusterDNSModule] Deploy nodelocaldns
01:07:07 UTC stdout: [kubesphere-master-1]
serviceaccount/nodelocaldns created
daemonset.apps/nodelocaldns created
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC [ClusterDNSModule] Generate nodelocaldns configmap
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC [ClusterDNSModule] Apply nodelocaldns configmap
01:07:07 UTC stdout: [kubesphere-master-1]
configmap/nodelocaldns created
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC [KubernetesStatusModule] Get kubernetes cluster status
01:07:07 UTC stdout: [kubesphere-master-1]
v1.23.10
01:07:07 UTC stdout: [kubesphere-master-1]
kubesphere-master-1   v1.23.10   [map[address:192.168.122.151 type:InternalIP] map[address:kubesphere-master-1 type:Hostname]]
01:07:07 UTC stdout: [kubesphere-master-1]
W0918 01:07:07.573415    4564 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
[upload-certs] Storing the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[upload-certs] Using certificate key:
a1871c129c12114b11204154358524aa2d8092f896787c470b5a0cb7e5d8beb6
01:07:07 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:07:07 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:07:07 UTC stdout: [kubesphere-master-1]
secret/kubeadm-certs patched
01:07:07 UTC stdout: [kubesphere-master-1]
q3dqvk.642741hyp6nr81ap
01:07:07 UTC success: [kubesphere-master-1]
01:07:07 UTC success: [kubesphere-master-2]
01:07:07 UTC [JoinNodesModule] Generate kubeadm config
01:07:07 UTC skipped: [kubesphere-master-1]
01:07:07 UTC success: [kubesphere-master-2]
01:07:07 UTC success: [kubesphere-worker-1]
01:07:07 UTC [JoinNodesModule] Generate audit policy
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC skipped: [kubesphere-master-1]
01:07:07 UTC [JoinNodesModule] Generate audit webhook
01:07:07 UTC skipped: [kubesphere-master-2]
01:07:07 UTC skipped: [kubesphere-master-1]
01:07:07 UTC [JoinNodesModule] Join control-plane node
01:07:27 UTC stdout: [kubesphere-master-2]
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
W0918 01:07:20.634659    3859 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
W0918 01:07:20.637850    3859 utils.go:69] The recommended value for "resolvConf" in "KubeletConfiguration" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf
[preflight] Running pre-flight checks before initializing the new control plane instance
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[download-certs] Downloading the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local kubesphere-master-1 kubesphere-master-1.cluster.local kubesphere-master-2 kubesphere-master-2.cluster.local kubesphere-worker-1 kubesphere-worker-1.cluster.local lb.kubesphere.local localhost] and IPs [10.233.0.1 192.168.122.152 127.0.0.1 192.168.122.151 192.168.122.181]
[certs] Generating "front-proxy-client" certificate and key
[certs] Valid certificates and keys now exist in "/etc/kubernetes/pki"
[certs] Using the existing "sa" key
[kubeconfig] Generating kubeconfig files
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[check-etcd] Skipping etcd check in external mode
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
[control-plane-join] using external etcd - no local stacked instance added
The 'update-status' phase is deprecated and will be removed in a future release. Currently it performs no operation
[mark-control-plane] Marking the node kubesphere-master-2 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node kubesphere-master-2 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]

This node has joined the cluster and a new control plane instance was created:

* Certificate signing request was sent to apiserver and approval was received.
* The Kubelet was informed of the new secure connection details.
* Control plane (master) label and taint were applied to the new node.
* The Kubernetes control plane instances scaled up.


To start administering your cluster from this node, you need to run the following as a regular user:

	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config

Run 'kubectl get nodes' to see this node join the cluster.
01:07:27 UTC skipped: [kubesphere-master-1]
01:07:27 UTC success: [kubesphere-master-2]
01:07:27 UTC [JoinNodesModule] Join worker node
01:07:34 UTC stdout: [kubesphere-worker-1]
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
W0918 01:07:27.943110    3370 utils.go:69] The recommended value for "clusterDNS" in "KubeletConfiguration" is: [10.233.0.10]; the provided value is: [169.254.25.10]
W0918 01:07:27.947016    3370 utils.go:69] The recommended value for "resolvConf" in "KubeletConfiguration" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
01:07:34 UTC skipped: [kubesphere-master-2]
01:07:34 UTC success: [kubesphere-worker-1]
01:07:34 UTC [JoinNodesModule] Copy admin.conf to ~/.kube/config
01:07:34 UTC skipped: [kubesphere-master-1]
01:07:34 UTC success: [kubesphere-master-2]
01:07:34 UTC [JoinNodesModule] Remove master taint
01:07:34 UTC stdout: [kubesphere-master-2]
node/kubesphere-master-2 untainted
01:07:34 UTC stdout: [kubesphere-master-2]
error: taint "node-role.kubernetes.io/control-plane:NoSchedule" not found
01:07:34 UTC [WARN] Failed to exec command: sudo -E /bin/bash -c "/usr/local/bin/kubectl taint nodes kubesphere-master-2 node-role.kubernetes.io/control-plane=:NoSchedule-" 
error: taint "node-role.kubernetes.io/control-plane:NoSchedule" not found: Process exited with status 1
01:07:34 UTC skipped: [kubesphere-master-1]
01:07:34 UTC success: [kubesphere-master-2]
01:07:34 UTC [JoinNodesModule] Add worker label to all nodes
01:07:34 UTC stdout: [kubesphere-master-1]
node/kubesphere-master-2 labeled
01:07:34 UTC stdout: [kubesphere-master-1]
node/kubesphere-worker-1 labeled
01:07:34 UTC success: [kubesphere-master-1]
01:07:34 UTC skipped: [kubesphere-master-2]
01:07:34 UTC [DeployNetworkPluginModule] Generate calico
01:07:34 UTC skipped: [kubesphere-master-2]
01:07:34 UTC success: [kubesphere-master-1]
01:07:34 UTC [DeployNetworkPluginModule] Deploy calico
01:07:36 UTC stdout: [kubesphere-master-1]
configmap/calico-config created
customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created
clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created
clusterrole.rbac.authorization.k8s.io/calico-node created
clusterrolebinding.rbac.authorization.k8s.io/calico-node created
daemonset.apps/calico-node created
serviceaccount/calico-node created
deployment.apps/calico-kube-controllers created
serviceaccount/calico-kube-controllers created
poddisruptionbudget.policy/calico-kube-controllers created
01:07:36 UTC skipped: [kubesphere-master-2]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC [ConfigureKubernetesModule] Configure kubernetes
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC skipped: [kubesphere-master-2]
01:07:36 UTC [ChownModule] Chown user $HOME/.kube dir
01:07:36 UTC success: [kubesphere-worker-1]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC success: [kubesphere-master-2]
01:07:36 UTC [AutoRenewCertsModule] Generate k8s certs renew script
01:07:36 UTC success: [kubesphere-master-2]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC [AutoRenewCertsModule] Generate k8s certs renew service
01:07:36 UTC success: [kubesphere-master-2]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC [AutoRenewCertsModule] Generate k8s certs renew timer
01:07:36 UTC success: [kubesphere-master-2]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC [AutoRenewCertsModule] Enable k8s certs renew service
01:07:36 UTC success: [kubesphere-master-2]
01:07:36 UTC success: [kubesphere-master-1]
01:07:36 UTC [SaveKubeConfigModule] Save kube config as a configmap
01:07:37 UTC success: [LocalHost]
01:07:37 UTC [AddonsModule] Install addons
01:07:37 UTC success: [LocalHost]
01:07:37 UTC Pipeline[CreateClusterPipeline] execute successfully
